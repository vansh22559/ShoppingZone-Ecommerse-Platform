-- Query 1 to retrieve customer information along with their orders and the most recent order date:
SELECT 
    c.CustomerID, 
    c.FirstName, 
    c.LastName, 
    o.OrderID, 
    o.OrderStatus, 
    o.OrderAmount, 
    o.OrderDate
FROM 
    Customer c
JOIN 
    Orders o ON c.CustomerID = o.CustomerID
JOIN 
    (
        SELECT 
            CustomerID, 
            MAX(OrderDate) AS RecentOrderDate
        FROM 
            Orders
        GROUP BY 
            CustomerID
    ) recent_orders ON o.CustomerID = recent_orders.CustomerID AND o.OrderDate = recent_orders.RecentOrderDate;



-- Query 2 to retrieve customer reviews along with their corresponding product names, sorted by the number of reviews each product has:
SELECT 
    pr.ReviewID, 
    pr.ProductID, 
    pr.CustomerID, 
    pr.Comment, 
    pr.Rating, 
    pr.ReviewDate, 
    p.ProductName
FROM 
    ProductReview pr
JOIN 
    Product p ON pr.ProductID = p.ProductID
ORDER BY 
    (SELECT COUNT(*) FROM ProductReview WHERE ProductID = p.ProductID) DESC;


-- Query 3 to retrieve customer information regarding people who have not placed any orders
SELECT 
    c.CustomerID, 
    c.FirstName, 
    c.LastName, 
    c.EmailAddress, 
    c.Phone, 
    c.DateOfBirth, 
    c.AddressLine, 
    c.City, 
    c.State, 
    c.PostalCode
FROM 
    Customer c
LEFT JOIN 
    Orders o ON c.CustomerID = o.CustomerID
WHERE 
    o.CustomerID IS NULL;
    
    
-- Query 4 to find the top 5 customers who have made the highest total purchases:
SELECT 
    c.CustomerID, 
    c.FirstName, 
    c.LastName, 
    SUM(o.OrderAmount) AS TotalPurchases
FROM 
    Customer c
JOIN 
    Orders o ON c.CustomerID = o.CustomerID
GROUP BY 
    c.CustomerID
ORDER BY 
    TotalPurchases DESC
LIMIT 5;


-- query 5 to find the average rating for each product:
SELECT ProductID, AVG(Rating) AS AverageRating
FROM ProductReview
GROUP BY ProductID;


-- query 6 to count the number of products in each category in the catalog:
SELECT c.Category, COUNT(cp.ProductID) AS NumberOfProducts
FROM Catalogue c
JOIN CatalogueProducts cp ON c.CatalogueID = cp.CatalogueID
GROUP BY c.Category;


-- Query 7 to Retrieve the total revenue generated by each shop owner:
SELECT so.OwnerID, so.FirstName, so.LastName, SUM(o.OrderAmount) AS TotalRevenue
FROM ShopOwner so
JOIN Product p ON so.OwnerID = p.OwnerID
JOIN Orders o ON p.ProductID = o.ProductID
GROUP BY so.OwnerID, so.FirstName, so.LastName;


-- Query 8 to Find the customers who have purchased products from a specific category and their average order amount:
SELECT c.CustomerID, c.FirstName, c.LastName, AVG(o.OrderAmount) AS AvgOrderAmount
FROM Customer c
JOIN Orders o ON c.CustomerID = o.CustomerID
JOIN OrderProducts op ON o.OrderID = op.OrderID
JOIN Product p ON op.ProductID = p.ProductID
JOIN CatalogueProducts cp ON p.ProductID = cp.ProductID
JOIN Catalogue ct ON cp.CatalogueID = ct.CatalogueID
WHERE ct.Category = 'Electronics'
GROUP BY c.CustomerID, c.FirstName, c.LastName;


-- Query 9 to Retrieve the total number of products in each category along with the category name:
SELECT c.Category, COUNT(cp.ProductID) AS NumberOfProducts
FROM Catalogue c
LEFT JOIN CatalogueProducts cp ON c.CatalogueID = cp.CatalogueID
GROUP BY c.Category;


-- Query 10 to Calculate the total revenue generated by each category:
SELECT ct.Category, SUM(o.OrderAmount) AS TotalRevenue
FROM Catalogue ct
JOIN CatalogueProducts cp ON ct.CatalogueID = cp.CatalogueID
JOIN Product p ON cp.ProductID = p.ProductID
JOIN Orders o ON p.ProductID = o.ProductID
GROUP BY ct.Category;



-- Query 11 to Find the customers who have spent more than the average order amount:
WITH AvgOrderAmount AS (
    SELECT AVG(OrderAmount) AS AvgAmount
    FROM Orders
),
CustomersAboveAvg AS (
    SELECT c.CustomerID, c.FirstName, c.LastName, SUM(o.OrderAmount) AS TotalOrderAmount
    FROM Customer c
    JOIN Orders o ON c.CustomerID = o.CustomerID
    GROUP BY c.CustomerID, c.FirstName, c.LastName
    HAVING SUM(o.OrderAmount) > (SELECT AvgAmount FROM AvgOrderAmount)
)
SELECT * FROM CustomersAboveAvg;


-- Find 12 the customers who have purchased products from at least two different categories:
SELECT c.CustomerID, c.FirstName, c.LastName
FROM Customer c
JOIN Orders o ON c.CustomerID = o.CustomerID
JOIN OrderProducts op ON o.OrderID = op.OrderID
JOIN Product p ON op.ProductID = p.ProductID
JOIN CatalogueProducts cp ON p.ProductID = cp.ProductID
JOIN Catalogue ct ON cp.CatalogueID = ct.CatalogueID
GROUP BY c.CustomerID
HAVING COUNT(DISTINCT ct.Category) >= 2;


-- Query 13 to Calculate the total amount spent by each customer in the last 3 months:
SELECT c.CustomerID, c.FirstName, c.LastName, SUM(o.OrderAmount) AS TotalAmountSpent
FROM Customer c
JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)
GROUP BY c.CustomerID, c.FirstName, c.LastName;


-- Query 14 to Find the top 5 products with the highest average rating:
SELECT p.ProductID, p.ProductName, AVG(pr.Rating) AS AvgRating
FROM Product p
JOIN ProductReview pr ON p.ProductID = pr.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY AvgRating DESC
LIMIT 5;


-- Query 15 to Calculate the total number of orders placed by each customer, excluding customers who have not placed any orders:
SELECT c.CustomerID, c.FirstName, c.LastName, COUNT(o.OrderID) AS TotalOrders
FROM Customer c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID
HAVING TotalOrders > 0;



-- Query 16 to Find the top 3 most profitable categories, along with the total revenue and the number of products sold in each category:
SELECT
    ct.Category,
    SUM(o.OrderAmount) AS TotalRevenue,
    COUNT(DISTINCT p.ProductID) AS NumProductsSold
FROM Catalogue ct
JOIN CatalogueProducts cp ON ct.CatalogueID = cp.CatalogueID
JOIN Product p ON cp.ProductID = p.ProductID
JOIN Orders o ON p.ProductID = o.ProductID
GROUP BY ct.Category
ORDER BY TotalRevenue DESC
LIMIT 3;
